<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="namespaceanonymous__namespace_02test_greet_8cpp_03" kind="namespace" language="C++">
    <compoundname>anonymous_namespace{testGreet.cpp}</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceanonymous__namespace_02test_greet_8cpp_03_1ab5e0f53d9644fe6cf19a1c0324bade02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto anonymous_namespace{testGreet.cpp}::isInRange</definition>
        <argsstring>(T lo, T hi)</argsstring>
        <name>isInRange</name>
        <qualifiedname>anonymous_namespace{testGreet.cpp}::isInRange</qualifiedname>
        <param>
          <type>T</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>T</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
<para>Check if a value is within a specified range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lo</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hi</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound of the range.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return true if the value is within the range [lo, hi], otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" line="88" column="13" bodyfile="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceanonymous__namespace_02test_greet_8cpp_03_1afa75698fd4c3273d2cfbab38519a6de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>anonymous_namespace{testGreet.cpp}::TSGreet_NightTimeGreeting</definition>
        <argsstring>()</argsstring>
        <name>TSGreet_NightTimeGreeting</name>
        <qualifiedname>anonymous_namespace{testGreet.cpp}::TSGreet_NightTimeGreeting</qualifiedname>
        <briefdescription>
<para>Test night time greeting. This test verifies that the greet function returns &quot;Good night &lt;name&gt;!&quot; when the time is between 19:00 and 04:59. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="implements_1_implements000005"><xreftitle>Implements</xreftitle><xrefdescription><para>Requirement: SwTests.tc_greet_night_time_greeting </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" line="108" column="1" bodyfile="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" bodystart="108" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceanonymous__namespace_02test_greet_8cpp_03_1a3ac8fa234cece90ee6e68d91f3f9204e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>anonymous_namespace{testGreet.cpp}::TSGreet_MorningTimeGreeting</definition>
        <argsstring>()</argsstring>
        <name>TSGreet_MorningTimeGreeting</name>
        <qualifiedname>anonymous_namespace{testGreet.cpp}::TSGreet_MorningTimeGreeting</qualifiedname>
        <briefdescription>
<para>Test morning time greeting. This test verifies that the greet function returns &quot;Good morning &lt;name&gt;!&quot; when the time is between 05:00 and 10:59. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="implements_1_implements000006"><xreftitle>Implements</xreftitle><xrefdescription><para>Requirement: SwTests.tc_greet_morning_time_greeting </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" line="146" column="1" bodyfile="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" bodystart="146" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespaceanonymous__namespace_02test_greet_8cpp_03_1ab59e962dd6b1db36c11e87172d63910c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>anonymous_namespace{testGreet.cpp}::TSGreet_MiddayTimeGreeting</definition>
        <argsstring>()</argsstring>
        <name>TSGreet_MiddayTimeGreeting</name>
        <qualifiedname>anonymous_namespace{testGreet.cpp}::TSGreet_MiddayTimeGreeting</qualifiedname>
        <briefdescription>
<para>Test midday time greeting. This test verifies that the greet function returns &quot;Good midday &lt;name&gt;!&quot; when the time is between 11:00 and 12:59. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="implements_1_implements000007"><xreftitle>Implements</xreftitle><xrefdescription><para>Requirement: SwTests.tc_greet_midday_time_greeting </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" line="184" column="1" bodyfile="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" bodystart="184" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceanonymous__namespace_02test_greet_8cpp_03_1a704d23a9b13850048f8e9a13bcc1bf73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>anonymous_namespace{testGreet.cpp}::TSGreet_AfternoonTimeGreeting</definition>
        <argsstring>()</argsstring>
        <name>TSGreet_AfternoonTimeGreeting</name>
        <qualifiedname>anonymous_namespace{testGreet.cpp}::TSGreet_AfternoonTimeGreeting</qualifiedname>
        <briefdescription>
<para>Test afterboon time greeting. This test verifies that the greet function returns &quot;Good afternoon &lt;name&gt;!&quot; when the time is between 13:00 and 18:59. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="implements_1_implements000008"><xreftitle>Implements</xreftitle><xrefdescription><para>Requirement: SwTests.tc_greet_afternoon_time_greeting </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" line="222" column="1" bodyfile="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" bodystart="222" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespaceanonymous__namespace_02test_greet_8cpp_03_1a68297005b0062b4445eca40d83dafd86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>anonymous_namespace{testGreet.cpp}::TSGreet_UserNameGreeting</definition>
        <argsstring>()</argsstring>
        <name>TSGreet_UserNameGreeting</name>
        <qualifiedname>anonymous_namespace{testGreet.cpp}::TSGreet_UserNameGreeting</qualifiedname>
        <briefdescription>
<para>Test greet with name provided. This test verifies that the greet function returns the correct greeting based on the provided name. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="implements_1_implements000009"><xreftitle>Implements</xreftitle><xrefdescription><para>Requirement: SwTests.tc_greet_user_name </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" line="260" column="1" bodyfile="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" bodystart="260" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="namespaceanonymous__namespace_02test_greet_8cpp_03_1ac912ae659cf1c1b0665a8b7a4a460fd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>anonymous_namespace{testGreet.cpp}::TSGreet_DefaultNameGreeting</definition>
        <argsstring>()</argsstring>
        <name>TSGreet_DefaultNameGreeting</name>
        <qualifiedname>anonymous_namespace{testGreet.cpp}::TSGreet_DefaultNameGreeting</qualifiedname>
        <briefdescription>
<para>Test greet without a name provided. This test verifies that the greet function returns the login name in the greeting when no name is provided. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="implements_1_implements000010"><xreftitle>Implements</xreftitle><xrefdescription><para>Requirement: SwTests.tc_greet_default_name </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" line="285" column="1" bodyfile="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" bodystart="285" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="namespaceanonymous__namespace_02test_greet_8cpp_03_1ad5b4e9b2f1398839700d5f2d42bce687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>anonymous_namespace{testGreet.cpp}::TSGreet_LocalTime</definition>
        <argsstring>()</argsstring>
        <name>TSGreet_LocalTime</name>
        <qualifiedname>anonymous_namespace{testGreet.cpp}::TSGreet_LocalTime</qualifiedname>
        <briefdescription>
<para>Test local time functionality. This test verifies that the LocalTime class correctly retrieves the current local time and matches it with the system&apos;s local time. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="implements_1_implements000011"><xreftitle>Implements</xreftitle><xrefdescription><para>Requirement: SwTests.tc_func_daytime_greeting_selection </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" line="317" column="1" bodyfile="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" bodystart="317" bodyend="336"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Annoymous namespace. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testGreet.cpp" line="63" column="1"/>
  </compounddef>
</doxygen>
