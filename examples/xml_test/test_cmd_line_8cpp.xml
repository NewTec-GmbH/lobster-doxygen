<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="test_cmd_line_8cpp" kind="file" language="C++">
    <compoundname>testCmdLine.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">gmock/gmock.h</includes>
    <includes local="no">getopt.h</includes>
    <includes refid="lobster__gtest_8h" local="yes">lobster_gtest.h</includes>
    <includes local="yes">App.h</includes>
    <incdepgraph>
      <node id="6">
        <label>App.h</label>
      </node>
      <node id="5">
        <label>lobster_gtest.h</label>
        <link refid="lobster__gtest_8h"/>
      </node>
      <node id="1">
        <label>C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testCmdLine.cpp</label>
        <link refid="test_cmd_line_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>getopt.h</label>
      </node>
      <node id="3">
        <label>gmock/gmock.h</label>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceanonymous__namespace_02test_cmd_line_8cpp_03">anonymous_namespace{testCmdLine.cpp}</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="test_cmd_line_8cpp_1a150de2081d078b4fa37b2b0729b7a0b3" prot="public" static="no">
        <name>ARRAY_NUM_ELEMENTS</name>
        <param><defname>_array</defname></param>
        <initializer>(sizeof(_array) / sizeof((_array)[0]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A macro to calculate the number of elements in an array. This macro is used to determine the size of an array at compile time. It divides the total size of the array by the size of a single element.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_array</parametername>
</parameternamelist>
<parameterdescription>
<para>The array for which the number of elements is to be calculated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testCmdLine.cpp" line="73" column="9" bodyfile="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testCmdLine.cpp" bodystart="73" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Test for command line argument handling. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Andreas Merkle <ulink url="mailto:web@blue-andi.de">web@blue-andi.de</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>BSD<sp/>3-Clause<sp/>License</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2025,<sp/>NewTec<sp/>GmbH</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/>DESCRIPTION</highlight></codeline>
<codeline lineno="33"><highlight class="comment">*******************************************************************************/</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>Includes</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gmock/gmock.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;getopt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>public<sp/>domain<sp/>header<sp/>with<sp/>a<sp/>C/C++<sp/>macro<sp/>to<sp/>embed<sp/>tracing<sp/>tags<sp/>or<sp/>justifications.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>See<sp/>https://github.com/bmw-software-engineering/lobster/blob/main/support/gtest/include/lobster_gtest.h</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lobster__gtest_8h" kindref="compound">lobster_gtest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;App.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">using<sp/>::testing::HasSubstr;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="namespaceanonymous__namespace_02test_cmd_line_8cpp_03" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>Macros</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARRAY_NUM_ELEMENTS(_array)<sp/>(sizeof(_array)<sp/>/<sp/>sizeof((_array)[0]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>Types<sp/>and<sp/>Classes</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>Prototypes</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>Variables</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>External<sp/>functions</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">TEST(TSCmdLine,<sp/>Cli)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lobster__gtest_8h_1a52820f69c4e4f23eba3d5c45c9ddcab4" kindref="member">LOBSTER_TRACE</ref>(</highlight><highlight class="stringliteral">&quot;SwTests.tc_cli&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>App<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;greet&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Alice&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::internal::CaptureStdout();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>optind<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>optind<sp/>to<sp/>ensure<sp/>getopt_long<sp/>starts<sp/>fresh.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(0,<sp/>app.run(<ref refid="test_cmd_line_8cpp_1a150de2081d078b4fa37b2b0729b7a0b3" kindref="member">ARRAY_NUM_ELEMENTS</ref>(argv),<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)&amp;argv));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::internal::GetCapturedStdout();</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">TEST(TSCmdLine,<sp/>Stdout)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lobster__gtest_8h_1a52820f69c4e4f23eba3d5c45c9ddcab4" kindref="member">LOBSTER_TRACE</ref>(</highlight><highlight class="stringliteral">&quot;SwTests.tc_cli_stdout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>App<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;greet&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Tom&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::internal::CaptureStdout();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>optind<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>optind<sp/>to<sp/>ensure<sp/>getopt_long<sp/>starts<sp/>fresh.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>app.run(<ref refid="test_cmd_line_8cpp_1a150de2081d078b4fa37b2b0729b7a0b3" kindref="member">ARRAY_NUM_ELEMENTS</ref>(argv),<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)&amp;argv);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>output<sp/>=<sp/>testing::internal::GetCapturedStdout();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(output,<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Tom!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">TEST(TSCmdLine,<sp/>UsageHelp)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lobster__gtest_8h_1a52820f69c4e4f23eba3d5c45c9ddcab4" kindref="member">LOBSTER_TRACE</ref>(</highlight><highlight class="stringliteral">&quot;SwTests.tc_cli_usage_help&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>App<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;greet&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-h&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::internal::CaptureStdout();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>optind<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>optind<sp/>to<sp/>ensure<sp/>getopt_long<sp/>starts<sp/>fresh.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>app.run(<ref refid="test_cmd_line_8cpp_1a150de2081d078b4fa37b2b0729b7a0b3" kindref="member">ARRAY_NUM_ELEMENTS</ref>(argv),<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)&amp;argv);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>output<sp/>=<sp/>testing::internal::GetCapturedStdout();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(output,<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Usage:<sp/>greet<sp/>&lt;option(s)&gt;<sp/>[NAME]&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(output,<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Specify<sp/>a<sp/>user<sp/>name<sp/>to<sp/>greet,<sp/>defaults<sp/>to<sp/>login<sp/>name<sp/>if<sp/>unset.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(output,<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;--help,<sp/>-h\tShow<sp/>this<sp/>help<sp/>message.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(output,<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Copyright<sp/>(c)<sp/>2025<sp/>NewTec<sp/>GmbH&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">TEST(TSCmdLine,<sp/>UsageError)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lobster__gtest_8h_1a52820f69c4e4f23eba3d5c45c9ddcab4" kindref="member">LOBSTER_TRACE</ref>(</highlight><highlight class="stringliteral">&quot;SwTests.tc_cli_usage_error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>App<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;greet&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;--unknown&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::internal::CaptureStdout();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::internal::CaptureStderr();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>optind<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>optind<sp/>to<sp/>ensure<sp/>getopt_long<sp/>starts<sp/>fresh.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>app.run(<ref refid="test_cmd_line_8cpp_1a150de2081d078b4fa37b2b0729b7a0b3" kindref="member">ARRAY_NUM_ELEMENTS</ref>(argv),<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)&amp;argv);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>errOutput<sp/>=<sp/>testing::internal::GetCapturedStderr();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)testing::internal::GetCapturedStdout();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THAT(errOutput,<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Unknown<sp/>option:<sp/>--unknown&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>Local<sp/>functions</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Git/BMW_Lobster/trlcWorkInstructions/examples/cpp-greeter/test/testCmdLine.cpp"/>
  </compounddef>
</doxygen>
